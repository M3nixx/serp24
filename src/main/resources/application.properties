spring.application.name=serp24
debug=true


spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#make sure that the sql script is executed after hibernate ist initialized
spring.jpa.defer-datasource-initialization=true

#http://localhost:8080/h2-console
spring.h2.console.enabled=true



spring.cloud.azure.active-directory.enabled=true
# Specifies your Active Directory ID:
spring.cloud.azure.active-directory.profile.tenant-id=09709c98-6093-4ae4-a11b-88a046eb1b11
# Specifies your App Registration's Application ID:
spring.cloud.azure.active-directory.credential.client-id=cd8cb73e-f651-4573-a312-81022fc7beba
# Specifies your App Registration's secret key:
spring.cloud.azure.active-directory.credential.client-secret=-N_8Q~5FG5We0_VOzL8bErI2Jgxp9cH51g-QNcci

#spring.cloud.azure.active-directory.resource-server.claim-to-authority-prefix-map.roles=ROLE_

de.ostfalia.serp24.frontend=http://localhost:3000



# Zusätzlich notwendig für oauth2Login:
spring.security.oauth2.client.registration.azure.client-id=${spring.cloud.azure.active-directory.credential.client-id}
spring.security.oauth2.client.registration.azure.client-secret=${spring.cloud.azure.active-directory.credential.client-secret}
spring.security.oauth2.client.registration.azure.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.azure.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.azure.scope=openid, profile, email
spring.security.oauth2.client.provider.azure.issuer-uri=https://login.microsoftonline.com/${spring.cloud.azure.active-directory.profile.tenant-id}/v2.0